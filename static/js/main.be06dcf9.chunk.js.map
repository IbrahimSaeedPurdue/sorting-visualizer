{"version":3,"sources":["Layout/UI/Backdrop/Backdrop.module.css","components/ColsList/ColsList.module.css","algorithms/BubbleSort.js","algorithms/SelectionSort.js","algorithms/InsertionSort.js","algorithms/MergeSort.js","hoc/Auxi.js","Layout/UI/Backdrop/Backdrop.js","Layout/UI/Navigation/Dropdown/Dropdown.js","Layout/UI/Navigation/NavigationItems/NavigationItems.js","Layout/UI/Toolbar/Toolbar.js","Layout/Layout.js","components/ColsList/Col/Col.js","components/ColsList/ColsList.js","components/Button/Button.js","components/BuildControls/BuildControls.js","containers/sortingVisualizer/SortingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","bubbleSort","colArray","animations","isSorted","h","length","i","animation","cols","swap","temp","push","selectionSort","min","j","insertionSort","val","finalSwap","getMergeSortAnimations","array","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","doMerge","auxi","props","children","backdrop","show","className","classes","Backdrop","onClick","clicked","dropdown","menuClasses","menuLinks","key","event","currentAlgoHandler","links","target","pop","showMenu","Auxi","toggleMenu","icon","faAngleDown","join","id","NavigationItems","useState","elementaryMenu","complexMenu","DropdownState","setDropdownState","algoChoice","algoChoiceState","setAlgoChoice","algoChoiceHandler","choice","classList","remove","add","Dropdown","toolbar","href","layout","colNumHandler","colNum","col","style","height","colsList","ColsList","button","BuildControls","colNumDisplay","useRef","useEffect","current","focus","resetBestCase","resetWorstCase","resetArray","runCurrentAlgo","onChange","value","type","ref","step","max","window","innerWidth","SortingVisualizer","state","currentAlgo","screenWidth","newColNum","setState","prevState","colDiff","random","algo","alert","mergeSort","setAnimations","bubbleSortAlgo","playAnimations","selectionSortAlgo","insertionSortAlgo","playInsertionAnimations","playAnimationsMerge","sortingAlgo","callback","Array","from","document","getElementsByClassName","setTimeout","backgroundColor","tempHeight","isNewCol","arrayBars","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","newHeight","sort","a","b","addEventListener","this","removeEventListener","prevProps","JSON","stringify","Layout","Component","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.be06dcf9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Backdrop_Backdrop__tjc9R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ColsList\":\"ColsList_ColsList__3RvVs\"};","const bubbleSort = (colArray) => {\r\n  let animations = [];\r\n  let isSorted = true;\r\n  for (let h = colArray.length; h > 0; h--) {\r\n    for (let i = 0; i < h - 1; i++) {\r\n      let animation = {\r\n        cols: [i, i + 1],\r\n        swap: false\r\n      };\r\n\r\n      if (colArray[i] > colArray[i + 1]) {\r\n        let temp = colArray[i + 1];\r\n        colArray[i + 1] = colArray[i];\r\n        colArray[i] = temp;\r\n\r\n        animation.swap = true;\r\n        isSorted = false;\r\n      }\r\n      animations.push(animation);\r\n    }\r\n    if (isSorted) break;\r\n  }\r\n\r\n  return animations;\r\n};\r\n\r\n// let animations = [];\r\n//   while (true) {\r\n//     let isSorted = true;\r\n\r\n//     for (let i = 0; i < colArray.length - 1; i++) {\r\n//       let animation = {\r\n//         cols: [i, i + 1],\r\n//         swap: false\r\n//        }; \r\n\r\n//       if (colArray[i] > colArray[i + 1]) {\r\n//         let temp = colArray[i + 1];\r\n//         colArray[i + 1] = colArray[i];\r\n//         colArray[i] = temp;\r\n\r\n//         animation.swap = true;\r\n//         isSorted = false;\r\n//       }\r\n//       animations.push(animation);\r\n//     }\r\n//     if (isSorted) break;\r\n//   }\r\n\r\n//   return animations;\r\n\r\nexport default bubbleSort;\r\n\r\n","const selectionSort = (colArray) => {\r\n  let animations = [];\r\n  for (let i = 0; i < colArray.length - 1; i++) {\r\n    let min = i;\r\n    for (let j = i + 1; j < colArray.length; j++) {\r\n      if (colArray[j] < colArray[min]) {\r\n        min = j;\r\n      }\r\n\r\n      animations.push({\r\n        cols: [i, j],\r\n        swap: false\r\n      });\r\n    }\r\n    animations.push({\r\n      cols: [i, min],\r\n      swap: true\r\n    });\r\n    let temp = colArray[min];\r\n    colArray[min] = colArray[i]\r\n    colArray[i] = temp;\r\n  }\r\n  \r\n  return animations;\r\n};\r\n\r\n\r\nexport default selectionSort;","const insertionSort = (colArray) => {\r\n  let animations = [];\r\n  for (let i = 1; i < colArray.length; i++) {\r\n    let val = colArray[i];\r\n    let j = i - 1;\r\n    while (j >= 0 && colArray[j] > val) {\r\n      animations.push({\r\n        cols: [j, j + 1],\r\n        finalSwap: false\r\n      });\r\n      colArray[j + 1] = colArray[j];\r\n      j--;\r\n    }\r\n    animations.push({\r\n      cols: [j + 1],\r\n      finalSwap: true\r\n    });\r\n\r\n    colArray[j + 1] = val;\r\n  }\r\n  return animations;\r\n};\r\n\r\nexport default insertionSort;","//https://github.com/clementmihailescu/Sorting-Visualizer-Tutorial/tree/\r\nfunction getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray,\r\n  startIdx,\r\n  middleIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, i]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, i]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index i in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([j, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([j, j]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index j in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\n\r\nexport default getMergeSortAnimations;\r\n\r\n// const doMergeSort = (colArray) => {\r\n//   let tempArr = new Array(colArray.length);\r\n//   let animations = [];\r\n//   mergeSort(colArray, tempArr, 0, colArray.length - 1, animations);\r\n//   return animations;\r\n// };\r\n\r\n// const mergeSort = (colArray, tempArr, leftStart, rightEnd, animations) => {\r\n//   if (leftStart >= rightEnd) {\r\n//     return;\r\n//   }\r\n\r\n//   let mid = Math.floor((leftStart + rightEnd) / 2);\r\n//   mergeSort(colArray, tempArr, leftStart, mid, animations);\r\n//   mergeSort(colArray, tempArr, mid + 1, rightEnd, animations);\r\n//   mergeHalves(colArray, tempArr, leftStart, rightEnd, animations);\r\n// }\r\n\r\n// const mergeHalves = (colArray, tempArr, leftStart, rightEnd, animations) => {\r\n//   let rightStart = Math.floor((leftStart + rightEnd) / 2);\r\n//   let leftEnd = rightStart - 1;\r\n\r\n//   let leftIndex = leftStart;\r\n//   let rightIndex = rightStart;\r\n//   let tempIndex = leftStart;\r\n\r\n  \r\n//   while ((leftIndex <= leftEnd) && (rightIndex <= rightEnd)) {\r\n//     animations.push({\r\n//       cols: [leftIndex, rightIndex],\r\n//       swap: false\r\n//     });\r\n\r\n//     if (tempArr[leftIndex] <= tempArr[rightIndex]) {\r\n//       animations.push({\r\n//         cols: [tempIndex, colArray[leftIndex]],\r\n//         swap: true\r\n//       });\r\n//       colArray[tempIndex] = tempArr[leftIndex];\r\n//       tempIndex++;\r\n//       leftIndex++;\r\n//     } else {\r\n//       animations.push({\r\n//         cols: [tempIndex, colArray[rightIndex]],\r\n//         swap: true\r\n//       });\r\n//       colArray[tempIndex] = tempArr[rightIndex];\r\n//       tempIndex++;\r\n//       rightIndex++;\r\n//     }\r\n//     tempIndex++;\r\n//   }\r\n\r\n//   while (leftIndex <= leftEnd) {\r\n//     animations.push({\r\n//       cols: [leftIndex, leftIndex],\r\n//       swap: false\r\n//     });\r\n//     tempArr[tempIndex] = colArray[leftIndex];\r\n//     tempIndex++;\r\n//     leftIndex++;\r\n//     animations.push({\r\n//       cols: [tempIndex, colArray[leftIndex]],\r\n//       swap: true\r\n//     });\r\n//   }\r\n\r\n//   while (rightIndex <= rightEnd) {\r\n//     animations.push({\r\n//       cols: [rightIndex, rightIndex],\r\n//       swap: false\r\n//     });\r\n//     tempArr[tempIndex] = colArray[rightIndex];\r\n//     tempIndex++;\r\n//     rightIndex++;\r\n//     animations.push({\r\n//       cols: [tempIndex, colArray[rightIndex]],\r\n//       swap: true\r\n//     });\r\n//   }\r\n\r\n\r\n// };\r\n\r\n// export default doMergeSort;","const auxi = (props) => props.children;\r\n\r\nexport default auxi;","import React from 'react';\r\nimport classes from './Backdrop.module.css';\r\n\r\nconst backdrop = (props) => {\r\n  let backdrop = null;\r\n  if (props.show) {\r\n    backdrop = <div className={classes.Backdrop} onClick={props.clicked}/>;\r\n  }\r\n  return backdrop;\r\n}\r\n\r\nexport default backdrop;","import React from 'react';\r\nimport '../../Toolbar/Toolbar.scss';\r\nimport Backdrop from '../../Backdrop/Backdrop';\r\nimport Auxi from '../../../../hoc/Auxi';\r\nimport { faAngleDown } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nconst dropdown = (props) => {\r\n  let menuClasses = [\"Dropdown\"];\r\n  let menuLinks = [];\r\n\r\n  for (let i = 0; i < props.links.length; i++) {\r\n    menuLinks.push(\r\n      <li key={i}>\r\n        <span onClick={(event) => {\r\n          props.currentAlgoHandler(props.links[i]);\r\n          props.clicked(event.target);\r\n        }}>{props.links[i]}</span>\r\n      </li>\r\n    );\r\n    menuLinks.push(\r\n      <li key={\"seperator\" + i} className=\"Separator\"></li>\r\n    );\r\n  }\r\n  menuLinks.pop();\r\n\r\n  if (props.showMenu) {\r\n    menuClasses.push(\"Show\");\r\n  }\r\n\r\n  return (\r\n    <Auxi>\r\n      <li className=\"NavbarDropdown\">\r\n        <span onClick={props.toggleMenu} className=\"DropdownToggler\">\r\n          {props.children} <FontAwesomeIcon icon={faAngleDown} />\r\n        </span>\r\n        <ul className={menuClasses.join(' ')} id=\"my-dropdown-id\">\r\n          {menuLinks}\r\n        </ul>\r\n      </li>\r\n      <Backdrop show={props.showMenu}\r\n        clicked={props.toggleMenu} />\r\n    </Auxi>\r\n  );\r\n}\r\n\r\nexport default dropdown;","import React, { useState } from 'react';\r\nimport '../../Toolbar/Toolbar.scss';\r\nimport Dropdown from '../Dropdown/Dropdown';\r\n\r\nconst NavigationItems = (props) => {\r\n\r\n    const [DropdownState, setDropdownState] = useState({\r\n        elementaryMenu: false,\r\n        complexMenu: false,\r\n    });\r\n    const [algoChoiceState, setAlgoChoice] = useState({\r\n        algoChoice: null\r\n    });\r\n\r\n    const toggleElementaryMenu = () => {\r\n        if (DropdownState.elementaryMenu) {\r\n            setDropdownState({\r\n                elementaryMenu: false,\r\n                complexMenu: false\r\n            });\r\n        } else {\r\n            setDropdownState({\r\n                elementaryMenu: true,\r\n                complexMenu: false\r\n            });\r\n        }\r\n    };\r\n\r\n    const toggleComplexMenu = () => {\r\n        if (DropdownState.complexMenu) {\r\n            setDropdownState({\r\n                complexMenu: false\r\n            });\r\n        } else {\r\n            setDropdownState({\r\n                elementaryMenu: false,\r\n                complexMenu: true\r\n            });\r\n        }\r\n    };\r\n\r\n    const algoChoiceHandler = (choice) => {\r\n        if (algoChoiceState.algoChoice) {\r\n            algoChoiceState.algoChoice.classList.remove('Chosen');\r\n        }\r\n        choice.classList.add('Chosen');\r\n        setAlgoChoice({\r\n            algoChoice: choice\r\n        });\r\n    };\r\n\r\n    return (\r\n        <ul className=\"NavbarNav\">\r\n            <Dropdown toggleMenu={toggleElementaryMenu}\r\n                currentAlgoHandler={props.currentAlgoHandler}\r\n                showMenu={DropdownState.elementaryMenu}\r\n                clicked={algoChoiceHandler}\r\n                links={['Bubble Sort', 'Selection Sort', 'Insertion Sort']}>Elementary Sorts</Dropdown>\r\n            <Dropdown toggleMenu={toggleComplexMenu}\r\n                currentAlgoHandler={props.currentAlgoHandler}\r\n                showMenu={DropdownState.complexMenu}\r\n                clicked={algoChoiceHandler}\r\n                links={['Merge Sort']}>Complex Sorts</Dropdown>\r\n        </ul>\r\n    );\r\n\r\n};\r\n\r\nexport default NavigationItems;","import React from 'react';\r\nimport NavigationItems from '../Navigation/NavigationItems/NavigationItems';\r\nimport './Toolbar.scss';\r\n\r\nconst toolbar = (props) => (\r\n    <nav className=\"Navbar\">\r\n      <div className=\"Container\">\r\n        <div className=\"NavbarHeader\">\r\n          <button className=\"NavbarToggler\">\r\n            <span></span>\r\n            <span></span>\r\n            <span></span>\r\n          </button>\r\n          <a href=\"/\">Sorting <span>Visualizer</span></a>\r\n\r\n        </div>\r\n        <div className=\"NavbarMenu\" id=\"open-navbar1\">\r\n          {/* HERE */}\r\n          <NavigationItems currentAlgoHandler={props.currentAlgoHandler} />\r\n        </div>\r\n      </div>\r\n    </nav>\r\n);\r\n\r\nexport default toolbar;\r\n","import React from 'react';\r\nimport Auxi from '../hoc/Auxi';\r\nimport Toolbar from '../Layout/UI/Toolbar/Toolbar';\r\n\r\nconst layout = (props) => (\r\n  <Auxi>\r\n    <Toolbar currentAlgoHandler={props.currentAlgoHandler}\r\n      colNumHandler={props.colNumHandler}\r\n      colNum={props.colNum} />\r\n    <main>\r\n      {props.children}\r\n    </main>\r\n  </Auxi>\r\n);\r\n\r\nexport default layout;","import React from 'react';\r\n\r\nconst col = (props) => (\r\n  <div\r\n    className=\"Col\"\r\n    style={{\r\n      height: props.height,\r\n    }}\r\n  ></div>\r\n);\r\n\r\nexport default col;","import React from 'react';\r\nimport classes from './ColsList.module.css';\r\nimport Col from './Col/Col';\r\n\r\nconst colsList = (props) => {\r\n  let cols = [];\r\n  for (let i = 0; i < props.cols.length; i++) {\r\n    cols.push(\r\n      <Col\r\n        height={props.cols[i]}\r\n        key={i} />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.ColsList} >\r\n      {cols}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default colsList;\r\n\r\n\r\n","import React from 'react';\r\nimport './Button.scss';\r\n\r\nconst button = (props) => (\r\n  <div className=\"container\">\r\n    <div className=\"button\" onClick={props.clicked}>\r\n      <div className=\"icon\">\r\n        <p>{props.children}</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default button;","import React, { useEffect } from 'react';\r\nimport './BuildControls.scss';\r\nimport { useRef } from 'react';\r\nimport Button from '../Button/Button';\r\n\r\nconst BuildControls = (props) => {\r\n  const colNumDisplay = useRef();\r\n\r\n  useEffect(() => {\r\n    colNumDisplay.current.focus();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"BuildControls\">\r\n      <div>\r\n        <center>\r\n          <Button clicked={props.resetBestCase}>\r\n            Best Case\r\n        </Button>\r\n          <Button clicked={props.resetWorstCase}>\r\n            Worst Case\r\n        </Button>\r\n          <Button clicked={props.resetArray}>\r\n            Random Array\r\n        </Button>\r\n          <Button clicked={() => { props.runCurrentAlgo() }}>\r\n            Start\r\n        </Button>\r\n        </center>\r\n      </div>\r\n\r\n      <div className=\"slider\">\r\n        <div className=\"range-slider\">\r\n          <span>No. of Columns: </span>\r\n          <input className=\"range-slider__range\"\r\n            onChange={(event) => {\r\n              props.colNumHandler(event.target.value);\r\n            }}\r\n            type=\"range\" ref={colNumDisplay}\r\n            value={props.colNum} step=\"5\" min=\"0\" max={Math.floor(window.innerWidth / 4.3)} />\r\n          <span className=\"range-slider__value\">{props.colNum}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BuildControls; ","import React, { Component } from 'react';\r\nimport bubbleSortAlgo from '../../algorithms/BubbleSort';\r\nimport selectionSortAlgo from '../../algorithms/SelectionSort';\r\nimport insertionSortAlgo from '../../algorithms/InsertionSort';\r\nimport getMergeSortAnimations from '../../algorithms/MergeSort';\r\nimport '../../components/ColsList/Col/Col.css';\r\nimport Layout from '../../Layout/Layout';\r\nimport ColsList from '../../components/ColsList/ColsList';\r\nimport BuildControls from '../../components/BuildControls/BuildControls';\r\n\r\nclass SortingVisualizer extends Component {\r\n    state = {\r\n        cols: [],\r\n        colNum: 0,\r\n        animations: [],\r\n        isSorted: false,\r\n        currentAlgo: 'Merge Sort',\r\n        screenWidth: null\r\n    };\r\n\r\n\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('resize', () => {\r\n            this.colNumHandler(0);\r\n        });\r\n\r\n        this.resetArray();\r\n        this.setState({ screenWidth: window.innerWidth });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize');\r\n    }\r\n\r\n    shouldComponentUpdate(prevProps, prevState) {\r\n        if (JSON.stringify(prevState.cols) !== JSON.stringify(this.state.cols)) {\r\n            return true;\r\n        } else if (prevState.currentAlgo !== this.state.currentAlgo) {\r\n            return true;\r\n        } else if (prevState.colNum !== this.state.currentAlgo) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    colNumHandler = (newColNum) => {\r\n        this.setState((prevState) => {\r\n            let colDiff = newColNum - prevState.colNum;\r\n            let cols = [...prevState.cols];\r\n            if (colDiff < 0) {\r\n                for (let i = 0; i < -colDiff; i++) {\r\n                    cols.pop();\r\n                }\r\n                return { cols: cols, colNum: newColNum };\r\n            }\r\n\r\n            if (prevState.isSorted) {\r\n                for (let i = 0; i < colDiff; i++) {\r\n                    cols.push(500);\r\n                }\r\n            } else {\r\n                for (let i = 0; i < colDiff; i++) {\r\n                    cols.push(Math.floor(Math.random() * 501));\r\n                }\r\n            }\r\n\r\n            return { cols: cols, colNum: newColNum };\r\n        });\r\n\r\n    }\r\n\r\n    currentAlgoHandler = (algo) => {\r\n        this.setState({ currentAlgo: algo });\r\n    };\r\n\r\n    runCurrentAlgo = () => {\r\n        if (this.state.colNum === 0) {\r\n            alert('Increase the Number of Columns O_o');\r\n            return;\r\n        }\r\n\r\n        if (this.state.currentAlgo === 'Coming Soon') {\r\n            alert('cmon ma man i said it was coming soon ._. relax now');\r\n        }\r\n\r\n        switch (this.state.currentAlgo) {\r\n            case 'Bubble Sort':\r\n                this.bubbleSort();\r\n                break;\r\n            case 'Selection Sort':\r\n                this.selectionSort();\r\n                break;\r\n            case 'Insertion Sort':\r\n                this.insertionSort();\r\n                break;\r\n            case 'Merge Sort':\r\n                this.mergeSort();\r\n                break;\r\n            case 'Quick Sort':\r\n                //this.quickSort();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    bubbleSort = () => {\r\n        if (this.state.isSorted) {\r\n            alert('already sorted');\r\n            return;\r\n        }\r\n\r\n        this.setAnimations(bubbleSortAlgo, this.playAnimations);\r\n\r\n    };\r\n\r\n    selectionSort = () => {\r\n        if (this.state.isSorted) {\r\n            alert('already sorted');\r\n            return;\r\n        }\r\n        this.setAnimations(selectionSortAlgo, this.playAnimations);\r\n    }\r\n\r\n    insertionSort = () => {\r\n        if (this.state.isSorted) {\r\n            alert('already sorted');\r\n            return;\r\n        }\r\n        this.setAnimations(insertionSortAlgo, this.playInsertionAnimations);\r\n    };\r\n\r\n    mergeSort = () => {\r\n        this.setAnimations(getMergeSortAnimations, this.playAnimationsMerge);\r\n    }\r\n\r\n    setAnimations = (sortingAlgo, callback) => {\r\n        const animations = sortingAlgo([...this.state.cols]);\r\n        this.setState({ animations: animations }, callback);\r\n    };\r\n\r\n    playAnimations = () => {\r\n        const cols = Array.from(document.getElementsByClassName('Col'));\r\n        const animations = this.state.animations;\r\n\r\n        for (let i = 0; i < animations.length; i++) {\r\n            setTimeout(() => {\r\n                if (animations[i].swap) {\r\n                    cols[animations[i].cols[0]].style.backgroundColor = '#ffb74d';\r\n                    cols[animations[i].cols[1]].style.backgroundColor = '#ffb74d';\r\n\r\n                    let tempHeight = cols[animations[i].cols[1]].style.height;\r\n                    cols[animations[i].cols[1]].style.height = cols[animations[i].cols[0]].style.height;\r\n                    cols[animations[i].cols[0]].style.height = tempHeight;\r\n                } else {\r\n                    cols[animations[i].cols[0]].style.backgroundColor = '#ff9e80';\r\n                    cols[animations[i].cols[1]].style.backgroundColor = '#ff9e80';\r\n                }\r\n\r\n                setTimeout(() => {\r\n                    cols[animations[i].cols[0]].style.backgroundColor = '#1abc9c';\r\n                    cols[animations[i].cols[1]].style.backgroundColor = '#1abc9c';\r\n                }, 3);\r\n            }, i * 3);\r\n        }\r\n\r\n        this.setState({ isSorted: true });\r\n    }\r\n\r\n    playInsertionAnimations = () => {\r\n        const cols = Array.from(document.getElementsByClassName('Col'));\r\n        const animations = this.state.animations;\r\n        let isNewCol = false;\r\n\r\n        for (let i = 0; i < animations.length; i++) {\r\n            // eslint-disable-next-line\r\n            setTimeout(() => {\r\n                if (animations[i].finalSwap) {\r\n                    cols[animations[i].cols[0]].style.backgroundColor = '#ff9e80';\r\n                    isNewCol = true;\r\n                } else {\r\n                    if (isNewCol) {\r\n                        cols[animations[i].cols[0]].style.backgroundColor = 'brown';\r\n                        isNewCol = false;\r\n                    } else {\r\n                        cols[animations[i].cols[0]].style.backgroundColor = '#ffb74d';\r\n                    }\r\n\r\n\r\n                    let tempHeight = cols[animations[i].cols[1]].style.height;\r\n                    cols[animations[i].cols[1]].style.height = cols[animations[i].cols[0]].style.height;\r\n                    cols[animations[i].cols[0]].style.height = tempHeight;\r\n                }\r\n\r\n                setTimeout(() => {\r\n                    if (animations[i].finalSwap) {\r\n                        cols[animations[i].cols[0]].style.backgroundColor = '#1abc9c';\r\n                    } else {\r\n                        cols[animations[i].cols[0]].style.backgroundColor = '#1abc9c';\r\n                        cols[animations[i].cols[1]].style.backgroundColor = '#1abc9c';\r\n                    }\r\n\r\n                }, 3);\r\n            }, i * 3);\r\n        }\r\n\r\n        this.setState({ isSorted: true });\r\n    }\r\n\r\n    playAnimationsMerge = () => {\r\n        const animations = this.state.animations;\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('Col');\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 3 === 0 ? 'red' : '#1abc9c';\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * 3);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i * 3);\r\n            }\r\n        }\r\n\r\n\r\n        // const cols = Array.from(document.getElementsByClassName('Col'));\r\n        // const animations = this.state.animations;\r\n\r\n        // for (let i = 0; i < animations.length; i++) {\r\n        //   setTimeout(() => {\r\n\r\n        //     // let tempHeight = cols[animations[i].cols[1]].style.height;\r\n        //     // cols[animations[i].cols[1]].style.height = cols[animations[i].cols[0]].style.height;\r\n        //     // cols[animations[i].cols[0]].style.height = tempHeight;\r\n        //     if (animations[i].swap) {\r\n        //       cols[animations[i].cols[0]].style.height = `${cols[animations[i].cols[1]]}px`;\r\n        //       console.log(animations[i].cols[1]);\r\n\r\n        //     } else {\r\n        //       cols[animations[i].cols[0]].style.backgroundColor = '#ff9e80';\r\n        //       cols[animations[i].cols[1]].style.backgroundColor = '#ff9e80';\r\n        //     }\r\n\r\n        //     if (!animations[i].swap) {\r\n        //       setTimeout(() => {\r\n        //         cols[animations[i].cols[0]].style.backgroundColor = '#1abc9c';\r\n        //         cols[animations[i].cols[1]].style.backgroundColor = '#1abc9c';\r\n        //       }, 10);\r\n        //     }\r\n        //   }, i * 10);\r\n        // }\r\n\r\n        // this.setState({ isSorted: true });\r\n    }\r\n\r\n    resetArray = () => {\r\n        let cols = [];\r\n        for (let i = 0; i < this.state.colNum; i++) {\r\n            cols.push(Math.floor(Math.random() * 501));\r\n        }\r\n\r\n        this.setState({\r\n            cols: cols,\r\n            isSorted: false\r\n        });\r\n    };\r\n\r\n    resetWorstCase = () => {\r\n        let cols = [...this.state.cols];\r\n        cols.sort((a, b) => b - a);\r\n        this.setState({ cols: cols, isSorted: false });\r\n\r\n    }\r\n\r\n    resetBestCase = () => {\r\n        if (this.state.isSorted) {\r\n            alert('this is the best case');\r\n            return;\r\n        }\r\n\r\n        let cols = [...this.state.cols];\r\n        cols.sort((a, b) => a - b);\r\n        this.setState({ cols: cols, isSorted: true });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Layout currentAlgoHandler={this.currentAlgoHandler}>\r\n                <ColsList cols={this.state.cols} />\r\n                <BuildControls resetBestCase={this.resetBestCase}\r\n                    resetWorstCase={this.resetWorstCase}\r\n                    resetArray={this.resetArray}\r\n                    runCurrentAlgo={() => { this.runCurrentAlgo(this.state.currentAlgo) }}\r\n                    colNumHandler={this.colNumHandler}\r\n                    colNum={this.state.colNum} />\r\n            </Layout>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default SortingVisualizer;","import React from 'react';\nimport SortingVisualizer from './containers/sortingVisualizer/SortingVisualizer';\nimport Auxi from './hoc/Auxi';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Auxi>\n      <SortingVisualizer />\n      <div className=\"mobileView\">\n        <div>\n          Mobile View Coming Soon :D\n        </div>\n      </div>\n    </Auxi>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}